### Mobilisation Effects
### Written by ~mw~
#
# How to use:
#
#	increase_mobilisation = yes
#
increase_conscription = {
	if = {
		limit = {
			has_idea = all_adults_serve
		}
		swap_ideas = {
			remove_idea = all_adults_serve
			add_idea = scraping_the_barrel
		}
	}
	if = {
		limit = {
			has_idea = service_by_requirement
		}
		swap_ideas = {
			remove_idea = service_by_requirement
			add_idea = all_adults_serve
		}
	}
	if = {
		limit = {
			has_idea = extensive_conscription
		}
		swap_ideas = {
			remove_idea = extensive_conscription
			add_idea = service_by_requirement
		}
	}
	if = {
		limit = {
			has_idea = limited_conscription
		}
		swap_ideas = {
			remove_idea = limited_conscription
			add_idea = extensive_conscription
		}
	}
	if = {
		limit = {
			has_idea = volunteer_only
		}
		swap_ideas = {
			remove_idea = volunteer_only
			add_idea = limited_conscription
		}
	}
	if = {
		limit = {
			has_idea = disarmed_nation
		}
		swap_ideas = {
			remove_idea = disarmed_nation
			add_idea = volunteer_only
		}
	}
}

increase_mobilisation = {
	if = {
		limit = {
			has_idea = war_economy
		}
		swap_ideas = {
			remove_idea = war_economy
			add_idea = tot_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = partial_economic_mobilisation
			add_idea = war_economy
		}
	}
	if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = low_economic_mobilisation
			add_idea = partial_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = civilian_economy
		}
		swap_ideas = {
			remove_idea = civilian_economy
			add_idea = low_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = isolation
		}
		swap_ideas = {
			remove_idea = isolation
			add_idea = civilian_economy
		}
	}
	if = {
		limit = {
			has_idea = undisturbed_isolation
		}
		swap_ideas = {
			remove_idea = undisturbed_isolation
			add_idea = isolation
		}
	}
}

decrease_mobilisation = {
	if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = low_economic_mobilisation
			add_idea = civilian_economy
		}
	}
	if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = partial_economic_mobilisation
			add_idea = low_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = war_economy
		}
		swap_ideas = {
			remove_idea = war_economy
			add_idea = partial_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = tot_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = tot_economic_mobilisation
			add_idea = war_economy
		}
	}
}

disband_units_setup = {
	set_temp_variable = { disband_country = THIS }
	random_state = {
		limit = {
			impassable = yes
			is_fully_controlled_by = owner
		}
		set_temp_variable = { disband_state = THIS }
		set_temp_variable = { disband_state_owner = THIS.owner }
		if = {
			limit = { NOT = { country_exists = XXA } }
			XXA = {
				transfer_state = PREV
				set_temp_variable = { debug_tag_instance = THIS }
				set_temp_variable = { old_manpower = manpower_k }
			}
		}
		else = {
			create_dynamic_country = {
				original_tag = XXA

				transfer_state = PREV
				set_temp_variable = { debug_tag_instance = THIS }
				set_temp_variable = { old_manpower = manpower_k }
			}
		}
	}
}

### IMPORTANT NOTE: transfer_units_fraction has several rounding problems and hardcoded behaviours, and the scripts below account for that
### DO NOT CHANGE THIS unless you're absolutely sure you know what you're doing

disband_units_transfer_manpower = {
	delete_unit = { disband = yes }

	set_temp_variable = { manpower_diff = manpower_k }
	subtract_from_temp_variable = { manpower_diff = old_manpower }

	while_loop_effect = { #avoid overflows
		limit = { check_variable = { manpower_diff > 100 } }
		subtract_from_temp_variable = { manpower_diff = 100 }
		var:disband_country = { add_manpower = 100000 }
		add_manpower = -100000
	}

	multiply_temp_variable = { manpower_diff = 1000 }
	var:disband_country = { add_manpower = manpower_diff }

	multiply_temp_variable = { manpower_diff = -1 }
	add_manpower = manpower_diff
}

disband_units_finalise = {
	var:disband_state = { transfer_state_to = var:disband_state_owner }
}

disband_one_to_three_divisions = {
	custom_effect_tooltip = disband_ten_percent_units
	hidden_effect = {
		disband_units_setup = yes
		transfer_units_fraction = {
			target = var:debug_tag_instance
			size = 0
			keep_unit_leaders_trigger = { always = yes }
		}
		var:debug_tag_instance = {
			disband_units_transfer_manpower = yes
			send_equipment_fraction = { target = var:disband_country value = 1 }
		}
		disband_units_finalise = yes
	}
}

disband_ten_percent_units = {
	custom_effect_tooltip = disband_ten_percent_units
	hidden_effect = {
		disband_units_setup = yes
		transfer_units_fraction = {
			target = var:debug_tag_instance
			size = 0
			army_ratio = 0.1
			keep_unit_leaders_trigger = { always = yes }
		}
		var:debug_tag_instance = {
			disband_units_transfer_manpower = yes
			send_equipment_fraction = { target = var:disband_country value = 1 }
		}
		disband_units_finalise = yes
	}
}

disband_twenty_percent_units = {
	custom_effect_tooltip = disband_twenty_percent_units
	hidden_effect = {
		disband_units_setup = yes
		transfer_units_fraction = {
			target = var:debug_tag_instance
			size = 0
			army_ratio = 0.2
			keep_unit_leaders_trigger = { always = yes }
		}
		var:debug_tag_instance = {
			disband_units_transfer_manpower = yes
			send_equipment_fraction = { target = var:disband_country value = 1 }
		}
		disband_units_finalise = yes
	}
}

disband_twenty_percent_units_delete_equipment = { #used for disarming countries in peace events
	custom_effect_tooltip = disband_twenty_percent_units_delete_equipment
	hidden_effect = {
		disband_units_setup = yes
		transfer_units_fraction = {
			target = var:debug_tag_instance
			size = 0
			army_ratio = 0.2
			keep_unit_leaders_trigger = {
				always = yes
			}
		}
		var:debug_tag_instance = {
			disband_units_transfer_manpower = yes
			set_equipment_fraction = 0
		}
		disband_units_finalise = yes
	}
}

disband_fifty_percent_units = {
	custom_effect_tooltip = disband_fifty_percent_units
	hidden_effect = {
		disband_units_setup = yes
		transfer_units_fraction = {
			target = var:debug_tag_instance
			target_organization = 1
			source_organization = 1
			size = 0
			army_ratio = 0.5
			keep_unit_leaders_trigger = { always = yes }
		}
		var:debug_tag_instance = {
			disband_units_transfer_manpower = yes
			send_equipment_fraction = { target = var:disband_country value = 1 }
		}
		disband_units_finalise = yes
	}
}

calculate_maximum_divisions = {
	### calculate base values - population and total factory count
	clear_variable = non_core_base
	clear_variable = puppet_base
	set_variable = { base_units = 0 }
	set_variable = { base_states = num_owned_states }
	set_temp_variable = { factory_points = 0 }
	set_temp_variable = { mils = 0 }
	every_owned_state = {
		if = {
			limit = { is_core_of = ROOT }
			add_to_variable = { ROOT.base_units = state_population_k }
		}
		else = {
			add_to_variable = { ROOT.non_core_base = state_population_k }
		}
		add_to_temp_variable = { factory_points = industrial_complex_level }
		add_to_temp_variable = { factory_points = building_level@dockyard }
		add_to_temp_variable = { mils = arms_factory_level }
	}
	## puppet also count as a non core bonus
	every_other_country = {
		limit = {
			is_subject_of = ROOT
		}
		every_owned_state = {
			add_to_variable = { ROOT.puppet_base = state_population_k }
		}
	}
	divide_variable = { puppet_base = 10 }
	multiply_variable = { puppet_base = 2 }
	add_to_variable = { base_units = puppet_base }
	divide_variable = { puppet_base = 100 } #for the tooltip

	multiply_temp_variable = { mils = 1.5 } #mils are worth 1.5x as much as civs/navs
	add_to_temp_variable = { factory_points = mils }

	# non-cores only give 10% of the population
	if = {
		limit = { has_variable = non_core_base }
		divide_variable = { non_core_base = 10 }
		add_to_variable = { base_units = non_core_base }
		divide_variable = { non_core_base = 100 } #for the tooltip
	}

	# base unit count = population / 1000
	divide_variable = { base_units = 75 }
	set_variable = { base_population = base_units } #for the tooltip
	multiply_variable = { base_states = 10 }
	add_to_variable = { base_units = base_states }

	# calculate the modifier -- 1 + [ ( industry - population ) / ( industry + population ) ]
	set_variable = { divisor = factory_points }
	add_to_variable = { divisor = base_units }

	set_variable = { industry_factor = factory_points }
	subtract_from_variable = { industry_factor = base_units }
	divide_variable = { industry_factor = divisor }
	add_to_variable = { industry_factor = 1 }
	
	multiply_variable = { industry_factor = 10 }
	
	# minimum modifier -- x0.5
	clamp_variable = { var = industry_factor min = 0.0 }
	# maximum modifier -- x1.5
	clamp_variable = { var = industry_factor max = 1.0 }

	set_variable = { max_divisions = base_units }
	multiply_variable = { max_divisions = industry_factor } 

	# +30% because its WW1
	if = {
		limit = { NOT = { has_global_flag = great_war_ends } }
		multiply_variable = { max_divisions = 1.30 }
	}

	# ideas that give +50 bataillons
	if = {
		limit = {
			OR = {
				has_idea = ROM_unionist_zeal
				has_idea = CHI_idea_warlord_neutrality
				has_idea = CHI_idea_local_military_development1
				has_idea = CHI_idea_local_military_development2
				has_idea = CHI_idea_republic_army
			}
		}
		add_to_variable = { max_divisions = 50 }
	}

	# ideas that give +100 bataillons
	if = {
		limit = {
			OR = {
				has_idea = CHI_idea_beiyang_government
				has_idea = CHI_idea_beiyang_government2
				has_idea = CHI_idea_local_military_development3
				has_idea = CHI_idea_beiyang_army
			}
		}
		add_to_variable = { max_divisions = 100 }
	}

	# ideas that give +250 bataillons
	if = {
		limit = {
			OR = {
				has_idea = AUH_ww1_House_Habsburg_Lorraine
				has_idea = AUH_ww1_House_Habsburg_Lorraine2
				has_idea = TUR_diplomatic_isolation
				has_idea = GER_idea_OHL
				has_idea = GER_idea_OHL1
				has_idea = GER_idea_OHL2
				has_idea = GER_idea_OHL3
				has_idea = GER_idea_OHL_dictatorship
				has_idea = RUS_russian_civil_war
				has_idea = VIN_colonial_army
				has_idea = VIN_popular_mystic_army
			}
		}
		add_to_variable = { max_divisions = 250 }
	}
	
	# +100 for balkan nations
	if = {
		limit = {
			is_balkan_nation = yes
		}
		multiply_variable = { max_divisions = 1.20 }
	}
	
	# +100 for chinese tags
	if = {
		limit = {
			is_china_or_warlord_no_tt = yes
		}
		multiply_variable = { max_divisions = 1.20 }
	}

	# +30% for majors
	if = {
		limit = { OR = { is_major = yes tag = TUR } }
		multiply_variable = { max_divisions = 1.30 }
	}

	# -20% for low level puppets
	if = {
		limit = { 
			OR = {
				has_autonomy_state = autonomy_integrated_puppet
				has_autonomy_state = autonomy_tgwr_informal_protectorate
				has_autonomy_state = autonomy_tgwr_protectorate
				has_autonomy_state = autonomy_tgwr_concession
				has_autonomy_state = autonomy_tgwr_crownland
			} 
		}
		multiply_variable = { max_divisions = 0.80 }
	}

	# demobilizing army for russia
	if = {
		limit = {
			has_idea = SOV_idea_red_guard
		}
		multiply_variable = { max_divisions = 0.5 }
	}

	# +25% for has war #add by ken
	if = {
		limit = { has_war = yes }
		multiply_variable = { max_divisions = 1.25 }
	}

	# +10% per economy law level above civilian economy
	set_temp_variable = { economy_mult = 1 }
	add_to_temp_variable = { economy_mult = modifier@unit_limit_factory_bonus }
	multiply_variable = { max_divisions = economy_mult }

	# the lower limit is the number of owned states or 5, whichever is higher
	set_variable = { lower_limit = num_owned_states }
	clamp_variable = {
		var = lower_limit
		min = 25
		max = 6000
	}

	# apply the lower limit
	set_variable = { net_max_divisions = max_divisions }
	round_variable = net_max_divisions
	clamp_variable = {
		var = max_divisions
		min = lower_limit
		max = 6000
	}

	# add any specific bonuses to the limit
	set_variable = { additional_unit_limit = modifier@unit_limit_bonus }
	add_to_variable = { max_divisions = additional_unit_limit }

	# demobilizing army for russia
	if = {
		limit = {
			has_idea = RUS_demobilizing_army
		}
		set_variable = { max_divisions = 200 }
	}

	round_variable = max_divisions
}

calculate_mobilisation_penalty = {
	set_variable = { mobilisation_penalty_var = num_battalions }
	divide_variable = { mobilisation_penalty_var = max_divisions }
	subtract_from_variable = { mobilisation_penalty_var = 0.25 }
	multiply_variable = { mobilisation_penalty_var = -1 }

	divide_variable = { mobilisation_penalty_var = 4 }

	
	set_variable = { mobilisation_penalty_var_positive = mobilisation_penalty_var }
	multiply_variable = { mobilisation_penalty_var_positive = -1 }
}